module Main;

// A trait for collection-like types.
trait c : Collects {
    // Associated type definition.
    // Here, we define a type level function `Elem` which domain is the trait `Collects` and returns a type.
    // When implementing `Collects` trait for a type `c`, you need to specify the value (which is a type) `Elem c`.
    type Elem c;
    type Iterator c;
    // You can use `Elem c` in trait method definitions.
    empty : c;
    insert : Elem c -> c -> c;
    to_iter : c -> Iterator c;
}

// Implementing `Collects` for arrays.
impl Array a : Collects {
    type Elem (Array a) = a;
    type Iterator (Array a) = ArrayIterator a;
    empty = [];
    insert = |x, xs| xs.push_back(x);
    to_iter = Array::to_iter;
}

// Implementing `Collects` for dynamic iterators.
impl DynIterator a : Collects {
    type Elem (DynIterator a) = a;
    type Iterator (DynIterator a) = DynIterator a;
    empty = DynIterator::empty;
    insert = |x, xs| xs.push_front(x).to_dyn;
    to_iter = |xs| xs;
}

// Takes three elements and returns a collection containing them.
triple : [c : Collects, Elem c = e] e -> e -> e -> c;
triple = |x, y, z| Collects::empty.insert(x).insert(y).insert(z);

// Takes two collections with the same element type, and insert all elements of the second collection to the first one.
extend : [c1 : Collects, c2 : Collects, Elem c1 = e, Elem c2 = e, Iterator c1 = it, it : Iterator, Iterator::Item it = e] c1 -> c2 -> c2;
extend = |xs, ys| xs.to_iter.fold(ys, |x, ys| ys.insert(x));

// Take a collection whose element type implements `ToString` trait, and stringify the collection.
stringify : [c : Collects, Elem c = e, e : ToString, Iterator c = it, it : Iterator, Iterator::Item it = e] c -> String;
stringify = |xs| xs.to_iter.map(to_string).join(", ");

main : IO ();
main = (
    // You need to specify the type annotation to avoid ambiguity between `Array` and `Iterator` for the type created by `triple`.
    assert_eq(|_|"", (triple(1, 2, 3) : Array I64).extend([4, 5, 6]).stringify, "1, 2, 3, 4, 5, 6");;

    // If you use `Iterator`, the `insert` is `push_front`, so the result is in reverse order.
    assert_eq(|_|"", (triple(1, 2, 3) : DynIterator I64).extend([4, 5, 6]).stringify, "6, 5, 4, 3, 2, 1");;
    
    pure()
);