module Main;
import Random;

// Calculate a Bool array whose element is true iff idx is prime.
is_prime : I64 -> Array Bool;
is_prime = |n| (
    let arr = Array::fill(n, true);
    let arr = arr.set(0, false);
    let arr = arr.set(1, false);
    // A way for loop is to use `loop`, `continue` and `break`.
    // loop : s -> LoopState s r -> r -- Takes the initial state and loop body.
    // continue : s -> LoopState s r -- Take the next state and continues the loop.
    // break : r -> LoopState s r -- Break the loop and `loop` returns the value given to `break`.
    loop((2, arr), |(i, arr)|
        if i*i > n { break $ arr };
        let next_arr = (
            if !arr.@(i) { arr };
            loop((i+i, arr), |(q, arr)|
                if n-1 < q { break $ arr };
                continue $ (q+i, arr.set(q, false))
            )
        );
        continue $ (i+1, next_arr)
    )
);

// Count the appearance of a value in an array.
count : [a: Eq] a -> Array a -> I64;
count = |elem, arr| (
    loop((0, 0), |(i, sum)|
        if arr.get_size == i { break $ sum };
        let sum = sum + (if arr.@(i) == elem {1} else {0});
        continue $ (i+1, sum)
    )
);

main : IO ();
main = (
    let init = [/* 0x12345 = */ 74565_U64, /* 0x23456 = */ 144470_U64, /* 0x34567 = */ 214375_U64, /* 0x45678 = */ 284280_U64];
    let random = init_by_array(init);
    let (_, time) = consumed_time_while_lazy(|_| (
        eval loop((0, random), |(i, random)|
            if i >= 80000000 {
                break $ ()
            };
            let (random, x) = generate_U64(random);
            continue $ (i + 1, random)
        );
        let n = is_prime(50000000).count(true);
        ()
    ));
    time.to_string.println
);