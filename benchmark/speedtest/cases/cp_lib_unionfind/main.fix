module Main;

import Random;
import CPLib.UnionFind;

main : IO ();
main = (
    // n=10^5個の要素を持つUnionFind木を生成し、n回程度ランダムにクエリを投げる。
    // もしn^2実装になっていたらこのテストは終わらない。
    let n = 1e5;
    let rng = Random::init_by_seed(0_U64);
    let uf = UnionFind::create(n);
    let ((uf, rng), time) = consumed_time_while_lazy(|_| range(0, n).fold((uf, rng), |_, (uf, rng)| (
        // unite
        let (rng, i) = rng.generate_I64_nonneg;
        let (rng, j) = rng.generate_I64_nonneg;
        let i = i % n; // 0 <= i < n
        let j = j % n; // 0 <= j < n
        let uf = uf.unite(i, j);

        // is_united
        let (rng, k) = rng.generate_I64_nonneg;
        let (rng, l) = rng.generate_I64_nonneg;
        let k = k % n; // 0 <= k < n
        let l = l % n; // 0 <= l < n
        let (uf, is_united) = uf.is_united(k, l);

        (uf, rng)
    )));
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"test_speed", grps.get_size, 16102);;
    println $ "[CPLib.UnionFind.Test] UnionFind({}): {}".populate([n.to_string, time.to_string]);;

    pure()
);