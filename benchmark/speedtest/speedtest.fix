module Main;

import Random;

// Creates a prime table up to n.
prime_table : I64 -> Array Bool;
prime_table = |n| (
    let arr = Array::fill(n, true);
    let arr = arr.set(0, false);
    let arr = arr.set(1, false);
    loop((2, arr), |(i, arr)|
        if i*i > n { break $ arr };
        let next_arr = (
            if !arr.@(i) { arr };
            loop((i+i, arr), |(q, arr)|
                if n-1 < q { break $ arr };
                continue $ (q+i, arr.set(q, false))
            )
        );
        continue $ (i+1, next_arr)
    )
);

// Count the appearance of a value in an array.
count_element : [a: Eq] a -> Array a -> I64;
count_element = |elem, arr| (
    loop((0, 0), |(i, sum)|
        if arr.get_size == i { break $ sum };
        let sum = sum + (if arr.@(i) == elem {1} else {0});
        continue $ (i+1, sum)
    )
);

// Generated many random numbers and sum them up.
sum_up_randoms : I64 -> U64;
sum_up_randoms = |n| (
    let init = [/* 0x12345 = */ 74565_U64, /* 0x23456 = */ 144470_U64, /* 0x34567 = */ 214375_U64, /* 0x45678 = */ 284280_U64];
    let rng = init_by_array(init);
    loop((0, 0_U64, rng), |(i, sum, rng)|
        if n == i { break $ sum };
        let (rng, x) = rng.generate_U64;
        continue $ (i + 1, sum + x, rng)
    )
);

main : IO ();
main = (
    assert_eq(|_|"count-primes", prime_table(700000).count_element(true), 56543);;
    assert_eq(|_|"sum-up-randoms", sum_up_randoms(700000), 12983264567312419866_U64);;
    pure()
);