module Main;

import Random;

// Creates a prime table up to n.
prime_table : I64 -> Array Bool;
prime_table = |n| (
    let arr = Array::fill(n, true);
    let arr = arr.set(0, false);
    let arr = arr.set(1, false);
    loop((2, arr), |(i, arr)|
        if i*i > n { break $ arr };
        let next_arr = (
            if !arr.@(i) { arr };
            loop((i+i, arr), |(q, arr)|
                if n-1 < q { break $ arr };
                continue $ (q+i, arr.set(q, false))
            )
        );
        continue $ (i+1, next_arr)
    )
);

// Count the appearance of a value in an array.
count_element : [a: Eq] a -> Array a -> I64;
count_element = |elem, arr| (
    loop((0, 0), |(i, sum)|
        if arr.get_size == i { break $ sum };
        let sum = sum + (if arr.@(i) == elem {1} else {0});
        continue $ (i+1, sum)
    )
);

// Common random seed
g_seed : Array U64;
g_seed = [/* 0x12345 = */ 74565_U64, /* 0x23456 = */ 144470_U64, /* 0x34567 = */ 214375_U64, /* 0x45678 = */ 284280_U64];

// Generate random numbers
generate_array : I64 -> Array U64;
generate_array = |n| (
    let rng = init_by_array(g_seed);
    let arr = fill(n, 0_U64);
    Iterator::range(0, n).fold((arr, rng), |i, (arr, rng)|
        let (rng, x) = rng.generate_U64;
        let arr = arr.set(i, x);
        (arr, rng)
    ).@0
);

// Generate random numbers and sum them up by `loop`.
sum_by_loop : I64 -> U64;
sum_by_loop = |n| (
    let rng = init_by_array(g_seed);
    loop((0, 0_U64, rng), |(i, sum, rng)|
        if n == i { break $ sum };
        let (rng, x) = rng.generate_U64;
        continue $ (i + 1, sum + x, rng)
    )
);

// Same as `sum_by_loop`, but the body function has a captured value.
sum_by_loop_arr : Array U64 -> U64;
sum_by_loop_arr = |arr| (
    let n = arr.get_size;
    loop((0, 0_U64), |(i, sum)|
        if n == i { break $ sum };
        continue $ (i + 1, sum + arr.@(i))
    )
);

// Generate random numbers and sum them up by `fold`.
sum_up_by_fold : I64 -> U64;
sum_up_by_fold = |n| (
    let rng = init_by_array(g_seed);
    Iterator::range(0, n).fold((rng, 0_U64), |_, (rng, sum)| 
        let (rng, x) = rng.generate_U64;
        (rng, sum + x)
    ).@1
);

// Same as `sum_by_loop`, but the body function has a captured value.
sum_up_by_fold_arr : Array U64 -> U64;
sum_up_by_fold_arr = |arr| (
    let n = arr.get_size;
    Iterator::range(0, n).fold(0_U64, |i, sum| 
        sum + arr.@(i)
    )
);

// Generate random numbers and sum them up by `loop_iter`.
sum_up_by_loop_iter : I64 -> U64;
sum_up_by_loop_iter = |n| (
    let rng = init_by_array(g_seed);
    Iterator::range(0, n).loop_iter((rng, 0_U64), |i, (rng, sum)| 
        let (rng, x) = rng.generate_U64;
        continue $ (rng, sum + x)
    ).@1
);

// Same as `sum_by_loop`, but the body function has a captured value.
sum_up_by_loop_iter_arr : Array U64 -> U64;
sum_up_by_loop_iter_arr = |arr| (
    let n = arr.get_size;
    Iterator::range(0, n).loop_iter(0_U64, |i, sum| 
        continue $ sum + arr.@(i)
    )
);

// Benchmark for `Array::mod`.
array_mod_benchmark : Array U64 -> U64;
array_mod_benchmark = |arr| (
    let n = arr.get_size;
    let arr = Iterator::range(1, n).fold(arr, |i, arr| 
        arr.mod(i, add(arr.@(i-1)))
    );
    arr.@(n-1)
);

main : IO ();
main = (
    assert_eq(|_|"count_primes", prime_table(700000).count_element(true), 56543);;

    assert_eq(|_|"sum_by_loop", sum_by_loop(100000), 12468381052418219682_U64);;
    assert_eq(|_|"sum_up_by_fold", sum_up_by_fold(100000), 12468381052418219682_U64);;
    assert_eq(|_|"sum_up_by_loop_iter", sum_up_by_loop_iter(100000), 12468381052418219682_U64);;

    let rng = Random::init_by_array(g_seed);
    let arr = generate_array(100000);
    assert_eq(|_|"sum_by_loop_arr", sum_by_loop_arr(arr), 12468381052418219682_U64);;
    assert_eq(|_|"sum_up_by_fold_arr", sum_up_by_fold_arr(arr), 12468381052418219682_U64);;
    assert_eq(|_|"sum_up_by_loop_iter_arr", sum_up_by_loop_iter_arr(arr), 12468381052418219682_U64);;
    assert_eq(|_|"array_mod_benchmark", array_mod_benchmark(arr), 12468381052418219682_U64);;

    pure()
);