// === Basic rules ===
sep = _{ " " | "\t" | NEWLINE | block_comment | line_comment }

extra_comma = { "," }

keywords = _{ ("let" | "eval" | "in" | "if" | "else" | "do" | "type" | "trait" | "impl") ~ sep+ }

semicolon = { ";" } // Generate rule for semicolon for better parsing error messages.

in_of_let = { "in" | semicolon }

eq_of_let = { "=" }

// Characters that can be used in value names, field names.
// - "@" is used for getter function ("@x" for getter of field x)
// - "!" is used for uniqueness. Cannot appear at head because "!false" should be parsed as prefix operator "!" for boolean value.
var_head = _{ ASCII_ALPHA_LOWER | "_" | "@" }
var_char = _{ ASCII_ALPHA | ASCII_DIGIT | "_" }
var = { !keywords ~ (var_head ~ var_char*) }

capital_name = { ASCII_ALPHA_UPPER ~ (ASCII_ALPHA | ASCII_DIGIT)* }

// Though period is allowed in namespace item in grammer, the parser raisse an error if a user tries to define a namespace with period.
// It is ok for using period in module name.
namespace_item = { capital_name ~ ("." ~ capital_name)* }
capital_fullname = { (namespace_item ~ "::")* ~ capital_name }
namespace = { namespace_item ~ ("::" ~ namespace_item)* }

// === Expressions ===

expr_number_lit = { number_lit_body ~ ("_" ~ number_lit_type)? }

number_lit_body_hex = { "-"? ~ "0x" ~ ASCII_HEX_DIGIT+ }
number_lit_body_oct = { "-"? ~ "0o" ~ ('0'..'7')+ }
number_lit_body_bin = { "-"? ~ "0b" ~ ('0'..'1')+ }
number_lit_body_dec = { "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ ( "e" ~ ("+" | "-")? ~ ASCII_DIGIT+ )? }
number_lit_body = { number_lit_body_hex | number_lit_body_oct | number_lit_body_bin | number_lit_body_dec }

number_lit_type = { "I8" | "U8" | "I16" | "U16" | "I32" | "U32" | "I64" | "U64" | "F32" | "F64" }

// Since "nullptr_val" should be parsed as a variable name, not as literal, "~ !var_char" is necessary.
expr_nullptr_lit = { "nullptr" ~ !var_char }

// Since "nullptr_val" should be parsed as a variable name, not as literal, "~ !var_char" is necessary.
expr_bool_lit = { ("true" | "false") ~ !var_char }

expr_array_lit = { "[" ~ (sep* ~ expr ~ sep* ~ ("," ~ sep* ~ expr)*)? ~ sep* ~ ("," ~ sep*)? ~ "]" }

expr_string_lit = { "\"" ~ string_lit_inner ~ "\"" }

string_lit_inner = { string_char* }

string_char = {
    !("\"" | "\\") ~ ANY 
    | "\\" ~ ("\"" | "\\" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

expr_u8_lit = { "'" ~ u8_lit_char ~ "'" }

u8_lit_char = {
    !("\"" | "\\") ~ ASCII
    | "\\" ~ ("\'" | "\\" | "n" | "r" | "t" | "0")
    | "\\" ~ ("x" ~ ASCII_HEX_DIGIT{2})
}

expr_lit = { expr_number_lit | expr_bool_lit | expr_string_lit | expr_array_lit | expr_nullptr_lit | expr_u8_lit }

expr_var = { (namespace ~ "::")? ~ var }

expr_let = { "let" ~ sep+ ~ pattern ~ sep+ ~ eq_of_let ~ sep* ~ expr ~ sep* ~ in_of_let ~ sep* ~ expr }

expr_eval = { "eval" ~ sep+ ~ expr ~ sep* ~ semicolon ~ sep* ~ expr }

else_of_if = { semicolon | "else" }

else_of_if_with_space = { semicolon | ("else" ~ sep) }

expr_if = { "if" ~ sep+ ~ expr ~ sep* ~ "{" ~ sep* ~ expr ~ sep* ~ "}" ~ sep* ~ ((else_of_if ~ sep* ~ "{" ~ sep* ~ expr ~ sep* ~ "}") | (else_of_if_with_space ~ sep* ~ expr)) }

expr_lam = { "|" ~ sep* ~ pattern ~ (sep* ~ "," ~ sep* ~ pattern)* ~ sep* ~ "|" ~ sep* ~ expr }

expr_do = { "do" ~ sep* ~ "{" ~ sep* ~ expr ~ sep* ~ "}" }

// This pattern will be parsed as one of 
// - the unit value i.e., `()`
// - tuple value e.g., `(42,)`, `(42, true)`, ... 
// - bracketed expression e.g., `(42)`
expr_tuple = { "(" ~ (sep* ~ expr ~ (sep* ~ "," ~ sep* ~ expr)* ~ (sep* ~ extra_comma)?)? ~ sep* ~ ")" }

expr_make_struct = { type_tycon ~ sep* ~ "{" ~ (sep* ~ type_field_name ~ sep* ~ ":" ~ sep* ~ expr ~ (sep* ~ "," ~ sep* ~ type_field_name ~ sep* ~ ":" ~ sep* ~ expr)* ~ (sep* ~ ",")?)? ~ sep* ~ "}" }

// nlr = non left recursive
expr_nlr = { expr_lit | expr_var | expr_let | expr_eval | expr_if | expr_do | expr_lam | expr_tuple | expr_make_struct | expr_call_c }

// List of arguments. Can be an empty list.
arg_list = { "(" ~ sep* ~ ")" | "(" ~ sep* ~ expr ~ (sep* ~ "," ~ sep* ~ expr)* ~ sep* ~ ")" }

// application sequence, e.g., `f(x,y)`. (left-associative)
expr_app = { expr_nlr ~ (sep* ~ arg_list)? }

// left to right application sequence, e.g., `x.f.g`. (left-associative)
combinator_dot = _{ "." }
expr_ltr_app = { expr_app ~ (sep* ~ combinator_dot ~ sep* ~ expr_app)* }

operator_bind = { "*" }
expr_bind = { operator_bind* ~ expr_ltr_app }

operator_composition = { "<<" | ">>" }
expr_composition = { expr_bind ~ (sep* ~ operator_composition ~ sep* ~ expr_bind)* }

// unary operators
// NOTE: we should write this rule so that "-1" is parsed as expr_int_lit.
operator_unary = { "-" | "!" }
expr_unary = { expr_composition | (operator_unary ~ sep*)* ~ expr_composition }

// operator*,/,% (left-associative)
operator_mul = { "*" | "/" | "%" }
expr_mul = { expr_unary ~ (sep* ~ operator_mul ~ sep* ~ expr_unary)* }

// operator+/- (left-associative)
operator_plus = { "+" | "-" }
expr_plus = { expr_mul ~ (sep* ~ operator_plus ~ sep* ~ expr_mul)* }

// comparison operators
// NOTE: in operator_cmp, "<=" and ">=" has to be put before of "<" and ">".
operator_cmp = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
expr_cmp = { expr_plus ~ (sep* ~ operator_cmp ~ sep* ~ expr_plus)? }

// operator and (right-associative)
operator_and = _{ "&&" }
expr_and = { expr_cmp ~ (sep* ~ operator_and ~ sep* ~ expr_cmp)* }

// operator or (right-associative)
operator_or = _{ "||" }
expr_or = { expr_and ~ (sep* ~ operator_or ~ sep* ~ expr_and)* }

// right to left application sequence, e.g., `g $ f $ x`. (right-associative)
combinator_dollar = _{ "$" }
expr_rtl_app = { expr_or ~ (sep* ~ combinator_dollar ~ sep* ~ expr_or)* }

expr_type_annotation = { expr_rtl_app ~ (sep* ~ ":" ~ sep* ~ type_expr)? }

expr = { expr_type_annotation }

// === Patterns === 

// pattern = { pattern_var | pattern_tuple | pattern_struct | pattern_union } // We currently disable pattern_union because we don't have "if-let" or "match" yet.
pattern = { pattern_var | pattern_tuple | pattern_struct }

pattern_var = { var ~ (sep* ~ ":" ~ sep* ~ type_expr)? }

pattern_tuple = { "(" ~ sep* ~ ")" | "(" ~ sep* ~ pattern ~ (sep* ~ "," ~ sep* ~ pattern)* ~ (sep* ~ ",")? ~ sep* ~ ")" }

pattern_struct = { type_tycon ~ sep* ~ "{" ~ sep* ~ type_field_name ~ sep* ~ ":" ~ sep* ~ pattern ~ (sep* ~ "," ~ sep* ~ type_field_name ~ sep* ~ ":" ~ sep* ~ pattern)* ~ sep* ~ "}" }

pattern_union = { (capital_name ~ "::")+ ~ type_field_name ~ sep* ~ "(" ~ sep* ~ pattern ~ sep* ~ ")" }

// === Types ===
type_expr = { type_fun }

type_tuple = { "(" ~ (sep* ~ type_expr ~ (sep* ~ "," ~ sep* ~ type_expr)* ~ (sep* ~ extra_comma)?)? ~ sep* ~ ")" }

type_nlr = { type_tycon | type_var | type_tuple }

type_tyapp = { type_nlr ~ (sep+ ~ type_nlr)* }

type_fun = { type_tyapp ~ (sep* ~ "->" ~ sep* ~ type_expr)? }

type_tycon = { capital_fullname }

tyvar_head = _{ ASCII_ALPHA_LOWER }
tyvar_char = _{ ASCII_ALPHA | ASCII_DIGIT }
type_var = { !keywords ~ tyvar_head ~ tyvar_char* }

type_qualified = { constraints? ~ sep* ~ type_expr }

predicate = { type_expr ~ sep* ~ ":" ~ sep* ~ trait_fullname }

equality = { type_expr ~ sep* ~ "=" ~ sep* ~ type_expr }

kind_signature = { type_var ~ sep* ~ ":" ~ sep* ~ kind }

constraints = { "[" ~ sep* ~ (predicate | kind_signature | equality) ~ (sep* ~ "," ~ sep* ~ (predicate | kind_signature | equality))* ~ sep* ~ "]" }

predicate_qualified = { constraints? ~ sep* ~ predicate }

// === Kinds ===
kind_star = { "*" }

kind_braced = { "(" ~ sep* ~ kind ~ sep* ~ ")" }

kind_nlr = { kind_star | kind_braced }

kind = { kind_nlr ~ (sep* ~ "->" ~ sep* ~ kind_nlr)* }

// === Type definitions ===
type_name = { capital_name }

type_field_name = { !keywords ~ (var_head ~ !"@") ~ var_char* }

type_field = { type_field_name ~ sep* ~ ":" ~ sep* ~ type_expr }

type_defn = { "type" ~ sep+ ~ (constraints ~ sep+)? ~ type_name ~ (sep+ ~ type_var)* ~ sep* ~ "=" ~ sep* ~ (struct_defn | union_defn | type_alias_defn) ~ sep* ~ semicolon }

comma_separated_type_fields = _{ type_field ~ ( sep* ~ "," ~ sep* ~ type_field )* ~ (sep* ~ ",")? }

box_or_unbox = { "box" | "unbox" }

// === struct definitions ===
struct_defn = { (box_or_unbox ~ sep+)? ~ "struct" ~ sep* ~ "{" ~ sep* ~ comma_separated_type_fields? ~ sep* ~ "}" }

// === union definitions ===
union_defn = { (box_or_unbox ~ sep+)? ~ "union" ~ sep* ~ "{" ~ sep* ~ comma_separated_type_fields ~ sep* ~ "}" }

// === type alias definitions === 
type_alias_defn = { type_expr }

// === Trait definitions ===
trait_name = { capital_name }

trait_fullname = { capital_fullname }

trait_defn = { "trait" ~ sep+ ~ constraints? ~ sep* ~ type_var ~ sep* ~ ":" ~ sep* ~ trait_name ~ sep* ~ "{" ~ (sep* ~ trait_member_defn)* ~ sep* ~ "}" }

trait_member_defn = { trait_member_value_defn | trait_member_type_defn }

trait_member_value_defn = { trait_member_value_name ~ sep* ~ ":" ~ sep* ~ type_qualified ~ sep* ~ semicolon }

trait_member_value_name = _{ var }

trait_member_type_defn = { "type" ~ (sep+ ~ constraints)? ~ sep+ ~ type_expr ~ (sep* ~ ":" ~ sep* ~ kind)? ~ sep* ~ semicolon }

// === Trait implementations ===
trait_impl = { "impl" ~ sep+ ~ predicate_qualified ~ sep* ~ "{" ~ (sep* ~ trait_member_impl)* ~ sep* ~ "}" }

trait_member_impl = { trait_member_value_impl | trait_member_type_impl }

trait_member_value_impl = { trait_member_value_name ~ sep* ~ "=" ~ sep* ~ expr ~ sep* ~ semicolon }

trait_member_type_impl = { "type" ~ sep+ ~ type_expr ~ sep* ~ "=" ~ sep* ~ type_expr ~ sep* ~ semicolon }

// === Trait aliases ===
trait_alias_defn = { "trait" ~ sep+ ~ trait_name ~ sep* ~ "=" ~ sep* ~ trait_fullname ~ (sep* ~ "+" ~ sep* ~ trait_fullname)* ~ sep* ~ semicolon }

// === Global names === 
global_name_type_sign = { var ~ sep* ~ ":" ~ sep* ~ type_qualified ~ sep* ~ semicolon }

global_name_defn = { var ~ sep* ~ "=" ~ sep* ~ expr ~ sep* ~ semicolon }

// === Import statements === 
import_statement = { "import" ~ sep+ ~ importee ~ sep* ~ semicolon }

importee = { namespace_item ~ (sep* ~ import_items_positive)? ~ (sep* ~ import_items_negative)? }

import_items_positive = { "::" ~ sep* ~ import_items }

import_items_negative = { "hiding" ~ sep+ ~ import_items }

import_items = { import_item_node | ("{" ~ sep* ~ (import_item_node ~ (sep* ~ "," ~ sep* ~ import_item_node)*)? ~ sep* ~ "}") }

import_item_node = { import_item_any | import_item_symbol | import_item_capital_item } 

import_item_any = { "*" }

import_item_symbol = { var }

import_item_capital_item = { namespace_item ~ (sep* ~ "::" ~ sep* ~ import_items)? } // Type name and trait name also matches to `namespace_item`.

// === Module ===
module_defn = { "module" ~ sep+ ~ namespace_item ~ sep* ~ semicolon }

global_defns = { global_defns_in_namespace | type_defn | global_name_type_sign | global_name_defn | trait_defn | trait_alias_defn | export_statement }

global_defns_in_namespace = { "namespace" ~ sep+ ~ namespace ~ sep* ~ "{" ~ (sep* ~ global_defns)* ~ sep* ~ "}" }

module = { module_defn ~ (sep* ~ (global_defns | trait_impl | import_statement))* }

// === FFI (CALL_C) ===
expr_call_c = { ffi_call_c_symbol ~ sep* ~ "[" ~ sep* ~ ffi_c_fun_ty ~ sep+ ~ ffi_c_fun_name ~ sep* ~ "(" ~ sep* ~ ffi_param_tys ~ (sep* ~ "," ~ sep* ~ ffi_var_args)? ~ sep* ~ ")" ~ (sep* ~ "," ~ sep* ~ expr)* ~ sep* ~ "]" }

ffi_call_c_symbol = _{ "CALL_C" }

ffi_c_fun_char = _{ !("(") ~ ANY }

ffi_c_fun_name = { ffi_c_fun_char+ }

ffi_c_fun_ty = { ffi_c_ty | ffi_c_ty_unit | ffi_c_ty_ptr | number_lit_type }

ffi_c_ty = _{ "CChar" | "CUnsignedChar" | "CShort" | "CUnsignedShort" | "CInt" | "CUnsignedInt" | "CLong" | "CUnsignedLong" | "CLongLong" | "CUnsignedLongLong" | "CSizeT" | "CFloat" | "CDouble" }
ffi_c_ty_unit = _{ "()" }
ffi_c_ty_ptr = _{ "Ptr" }

ffi_param_tys = { (ffi_c_fun_ty ~ (sep* ~ "," ~ sep* ~ ffi_c_fun_ty)*) | "" }

ffi_var_args = { "..." }

// === FFI (EXPORT) === 

export_symbol = { "EXPORT" }

exported_c_function_char = _{ !"]" ~ ANY }

exported_c_function_name = { exported_c_function_char+ }

export_statement = { export_symbol ~ sep* ~ "[" ~ sep* ~ var ~ sep* ~ "," ~ sep* ~ exported_c_function_name ~ sep* ~ "]" ~ sep* ~ semicolon }

// === Comments ===
block_comment = _{ "/*"  ~ block_commented_character*  ~ "*/" }

block_commented_character = _{ !"*/" ~ ANY }

line_comment = _{"//" ~ line_commented_character* ~ ( NEWLINE | EOI )}

line_commented_character = _{ !(NEWLINE | EOI) ~ ANY }

// === File ===
file = _{ SOI ~ sep* ~ module ~ sep* ~ EOI }