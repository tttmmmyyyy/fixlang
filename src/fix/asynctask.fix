module AsyncTask;
// This module provides a way to run a task asynchronously.
// 
// Importing this module automatically enables `--threaded` flag of the compiler. 
// Note that this causes some overhead even for a single-threaded program.

// A type for a computation task that runs asynchronously.
type Task a = unbox struct { dtor : Destructor TaskHandle };

// A native handle of a task. This type is used only for implementation.
type TaskHandle = Ptr;

// Get a boxed none of type `a` from a value of type `() -> a`.
_get_boxed_none_of_codomain_type : (() -> a) -> Boxed (Option a);
_get_boxed_none_of_codomain_type = |_func| (
    Boxed { value : Option::none() }
);

// Evaluate the boxed lazy pointer.
_run_task_function : Boxed (() -> Ptr) -> Ptr;
_run_task_function = |boxed_func| (
    let func = boxed_func.@value;
    func()
);
EXPORT[_run_task_function, fixruntime_run_task_function];

// Get the result of a task.
// This function blocks the current thread until the task is finished.
get : Task a -> a;
get = |task| (
    let task_handle = task.@dtor.@_value;
    let task_result_ptr = CALL_C[Ptr fixruntime_thread_get_task_result(Ptr), task_handle];
    let _ = task; // Do not call destructor before ending working with `task_handle`.
    unsafe_get_boxed_value_from_retained_ptr(task_result_ptr).Boxed::@value.as_some
);

// Make a task which performs a computation asynchronously.

// Example:
// ```
// module Main;
// import AsyncTask;
// import Debug;

// main : IO ();
// main = (
//     let sum_range = |from, to| (
//         loop((0, from), |(sum, i)| (
//             if i == to { break $ sum };
//             continue $ (sum + i, i + 1)
//         ))
//     );
//     let n = 1000000000;
//     // Compute the sum of numbers from 0 to n/2 - 1.
//     // This task will be executed asynchronously (if you are using multi-core CPU).
//     let sum_former = AsyncTask::make(|_| sum_range(0, n/2));
//     // Compute the sum of numbers from n/2 to n.
//     // We perfom this in the current thread while waiting for the result of the former task.
//     let sum_latter = sum_range(n/2, n);
//     // Sum up the results of the two computations.
//     let sum = sum_former.get + sum_latter;
//     // Then the sum should be n * (n - 1) / 2.
//     eval assert_eq(|_|"", sum, n * (n - 1) / 2);
//     println $ 
//         "Sum of numbers from 0 to " + (n - 1).to_string + 
//         " is " + sum_former.get.to_string + " + " + sum_latter.to_string + 
//         " = " + sum.to_string + "."
// );
// ```
make : (() -> a) -> Task a;
make = |func| (
    let boxed_none = _get_boxed_none_of_codomain_type(func);
    let func = mark_threaded(func);

    // Create task function to be run on a thread.
    let task_func : () -> Ptr = |_| (
        // Run the task function.
        let result = func();
        // Return the boxed and threaded value.
        mark_threaded(Boxed { value : Option::some(result) }).unsafe_get_retained_ptr_of_boxed_value
    );
    let boxed_task_func = Boxed { value : task_func };
    // Get the native handle of the task.
    let task_handle : TaskHandle = CALL_C[Ptr fixruntime_thread_create_task(Ptr, Ptr, Ptr), 
        boxed_task_func.unsafe_get_retained_ptr_of_boxed_value,
        boxed_none.unsafe_get_release_function_of_boxed_value,
        boxed_none.unsafe_get_retain_function_of_boxed_value
    ];

    // In the destructor, release the task handle.
    let dtor = Destructor::make(task_handle, |task_handle| (
        CALL_C[() fixruntime_thread_release_task(Ptr), task_handle]
    ));
    Task { dtor : dtor }
);

// Get the number of processors (CPU cores) currently available.
// This is implemented by calling `sysconf(_SC_NPROCESSORS_ONLN)`.
// The runtime pools as many threads as this number to execute asynchronous tasks.
number_of_processors : I64;
number_of_processors = CALL_C[I64 fixruntime_get_number_of_processors()];

namespace AsyncIOTask {

    // A type for an I/O action that can be run asynchronously.
    type IOTask a = unbox struct { _task : Task a };

    // Get the result of an asynchronous I/O action.
    get : IOTask a -> a;
    get = |IOTask { _task : task }| task.get;

    // An `IO` version of `AsyncTask::make`.
    // 
    // Example:
    // ```
    // module Main;
    // import AsyncTask;
    // 
    // main : IO ();
    // main = (
    //     let print_ten : I64 -> IO () = |task_num| (
    //         loop_m(0, |i| (
    //             if i == 10 {
    //                 break_m $ ()
    //             } else {
    //                 let msg = "task number: " + task_num.to_string + ", i: " + i.to_string;
    //                 eval *msg.println;
    //                 continue_m $ i + 1
    //             }
    //         ))
    //     );
    //     eval (*AsyncIOTask::make(print_ten(0))).get;
    //     eval (*AsyncIOTask::make(print_ten(1))).get;
    //     pure()
    // );
    // ```
    make : IO a -> IO (IOTask a);
    make = |io| (
        // NOTE: we must not create AsyncTask in this function; we should create it in the IO action.
        // Otherwise, user can run IO action in a pure function.
        // So we cannot implement this function as `pure $ IOTask { ... }`.
        IO { _data : |_| IOTask { _task : make(|_| io._unsafe_perform) } }
    );
}

namespace Var {
    // A type of variable which can be modified from multiple threads.
    // 
    // ```
    // module Main;
    // import AsyncTask;
    // 
    // main : IO ();
    // main = (
    //     let logger = *Var::make([]); // A mutable array of strings.
    // 
    //     // Launch multiple threads, and log in which order each thread is executed.
    //     let num_threads = number_of_processors * 2;
    //     eval *Iterator::range(0, num_threads).fold_m((), |_, i| (
    //         eval *AsyncIOTask::make(
    //             logger.lock(|logs| (
    //                 let count = logs.get_size;
    //                 let msg = "Thread " + i.to_string + " is running at " + count.to_string + 
    //                     if count % 10 == 1 { "st" } else if count % 10 == 2 { "nd" } else if count % 10 == 3 { "rd" } else { "th" };
    //                 let msg = msg + if i == count { "." } else { "!" };
    //                 logger.set(logs.push_back(msg))
    //             ))
    //         ).forget;
    //         pure()
    //     ));
    //
    //     // Wait until all threads are finished.
    //     eval *logger.wait(|logs| logs.get_size == num_threads);
    // 
    //     println $ (*logger.get).to_iter.join("\n")
    // );
    // ```
    type Var a = unbox struct { _dtor : Destructor VarHandle };

    type VarHandle = Ptr;

    type VarValue a = box struct { value : a };

    // Get a value stored in a `Var`.
    get : Var a -> IO a;
    get = |Var { _dtor : dtor }| IO { _data : |_| (
        let handle = dtor.@_value;
        eval CALL_C[() fixruntime_thread_var_lock(Ptr), handle];
        let ptr = CALL_C[Ptr fixruntime_thread_var_get(Ptr), handle];
        eval CALL_C[() fixruntime_thread_var_unlock(Ptr), handle];
        let _ = dtor; // Do not call destructor before ending working with handle.
        ptr.unsafe_get_boxed_value_from_retained_ptr.VarValue::@value
    ) };

    // `var.lock(act)` performs an action on the value in `var` while locking `var` to prevent it from being changed by another thread.
    lock : (a -> IO b) -> Var a -> IO b;
    lock = |act, Var { _dtor : dtor }| IO { _data : |_| (
        let handle = dtor.@_value;
        eval CALL_C[() fixruntime_thread_var_lock(Ptr), handle];
        let ptr = CALL_C[Ptr fixruntime_thread_var_get(Ptr), handle];
        let res = act(ptr.unsafe_get_boxed_value_from_retained_ptr.VarValue::@value)._unsafe_perform; 
        eval CALL_C[() fixruntime_thread_var_unlock(Ptr), handle];
        let _ = dtor; // Do not call destructor before ending working with handle.
        res
    ) };

    // Create a new `Var` object.
    make : a -> IO (Var a);
    make = |value| IO { _data : |_| (
        let value = mark_threaded(VarValue { value : value });
        let handle = CALL_C[Ptr fixruntime_thread_var_create(Ptr, Ptr, Ptr), 
            value.unsafe_get_retained_ptr_of_boxed_value,
            value.unsafe_get_release_function_of_boxed_value,
            value.unsafe_get_retain_function_of_boxed_value
        ];
        let dtor = Destructor::make(handle, |handle| (
            CALL_C[() fixruntime_thread_var_destroy(Ptr), handle]
        ));
        Var { _dtor : dtor }
    ) };

    // Atomically modifies a value in a `Var`.
    mod : (a -> a) -> Var a -> IO ();
    mod = |act, var| var.lock(|val| var.set(act(val)));

    // Set a value to a `Var`.
    set : a -> Var a -> IO ();
    set = |value, Var { _dtor : dtor }| IO { _data : |_| (
        let value = mark_threaded(VarValue { value : value });
        let ptr = value.unsafe_get_retained_ptr_of_boxed_value;
        let handle = dtor.@_value;
        eval CALL_C[() fixruntime_thread_var_lock(Ptr), handle];
        eval CALL_C[() fixruntime_thread_var_set(Ptr, Ptr), handle, ptr];
        eval CALL_C[() fixruntime_thread_var_signalall(Ptr), handle];
        eval CALL_C[() fixruntime_thread_var_unlock(Ptr), handle];
        let _ = dtor; // Do not call destructor before ending working with handle.
        ()
    ) };

    // `var.wait(cond)` waits until `cond` on the value of `var` is satisfied.
    // Note that it is not assured that `cond` is satisfied after `wait` returned; 
    // the value in `var` may be changed after `cond` is evaluated.
    wait : (a -> Bool) -> Var a -> IO ();
    wait = |cond, var| var.wait_and_lock(cond, |_| pure());

    // `var.wait_and_lock(cond, act)` waits until `cond` on the value of `var` is satisfied, 
    // then performs `act` on the value in `var` while locking `var` to prevent it from being changed by another thread.
    wait_and_lock : (a -> Bool) -> (a -> IO b) -> Var a -> IO b;
    wait_and_lock = |cond, act, Var { _dtor : dtor }| IO { _data : |_| (
        let handle = dtor.@_value;
        eval CALL_C[() fixruntime_thread_var_lock(Ptr), handle];
        let ok_val = loop((), |_| (
            let ptr = CALL_C[Ptr fixruntime_thread_var_get(Ptr), handle];
            let val = ptr.unsafe_get_boxed_value_from_retained_ptr.VarValue::@value;
            if cond(val) {
                break $ val
            } else {
                eval CALL_C[() fixruntime_thread_var_wait(Ptr), handle];
                continue $ ()
            }
        ));
        let res = act(ok_val)._unsafe_perform;
        eval CALL_C[() fixruntime_thread_var_unlock(Ptr), handle];
        let _ = dtor; // Do not call destructor before ending working with handle.
        res
    ) };
}