module Subprocess;
import Debug;

// This type represents the exit status of a subprocess.
// This type is the union of following variants:
// * `exit : U8` - Means that the subprocess successfully exited (i.e., the main function returned or `exit()` was called) and stores the exit status code.
// * `signaled : U8` - Means that the subprocess was terminated by a signal and stores the signal number which caused the termination.
// * `wait_failed : ()` - Means that the `run*` function failed to wait the subprocess to exit.
type ExitStatus = box union { 
    exit : U8,
    signaled : U8,
    wait_failed : ()
};

// `run_string(com, args, input)` executes a command specified by `com` with arguments `args`, and writes `input` to the standard input of the running command.
// The result is the pair of standard output and standard error, and an `ExitStatus` value.
run_string : String -> Array String -> String -> IOFail ((String, String), ExitStatus);
run_string = |com, args, input| (
    run_with_stream(com, args, |(stdin, stdout, stderr)| (
        eval *write_string(stdin, input);
        eval *close_file(stdin).lift; // Send EOF.
        pure $ (*read_string(stdout), *read_string(stderr))
    ))
);

// `run_with_stream(com, args, worker)` executes a command specified by `com` with arguments `args`. 
// The function `worker` receives three `IOHandle`s which are piped to the stdin, stdout and stderr of the running command.
// The result is the value returned by `worker` paired with an `ExitStatus` value.
// * `com : String` - The path to the program to run.
// * `args: Array String` - The arguments to be passed to `com`.
// * `worker : (IOHandle, IOHandle, IOHandle) -> IOFail a` - Receives three `IOHandle`s which are piped to stdin, stdout and stderr of the running command.
run_with_stream : String -> Array String -> ((IOHandle, IOHandle, IOHandle) -> IOFail a) -> IOFail (a, ExitStatus);
run_with_stream = |com, args, worker| (
    eval *pure();
    // Convert `args : Array String` to `Array Ptr`, and prolong lifetime so that elements will not be released.
    // Also, add NULL terminator to `args`.
    args.borrow_ptr(|_| args.map(_get_c_str).push_back(nullptr).borrow_ptr(|args: Ptr| com.borrow_c_str(|com : Ptr| (
        // Execute command.
        let out_error : Array Ptr = Array::empty(1)._unsafe_set_size(1);
        let out_files : Array Ptr = Array::empty(3)._unsafe_set_size(3);
        let out_pid : Array I64 = Array::empty(1)._unsafe_set_size(1);
        eval CALL_C[() fixruntime_fork_execvp(Ptr, Ptr, Ptr, Ptr, Ptr), com, args, out_error._get_ptr, out_files._get_ptr, out_pid._get_ptr];
        if out_error.@(0) != nullptr {
            // Some error occurred.
            let msg_ptr = out_error.@(0);
            let err_msg = String::_unsafe_from_c_str_ptr(msg_ptr);
            eval CALL_C[() free(Ptr), msg_ptr];
            IOFail::throw $ err_msg
        };
        let handles = (
            IOHandle::from_file_ptr(out_files.@(0)),
            IOHandle::from_file_ptr(out_files.@(1)),
            IOHandle::from_file_ptr(out_files.@(2))
        );
        let pid = out_pid.@(0);
        let worker_res = *worker(handles);
        eval *handles.@0.close_file.lift;
        eval *handles.@1.close_file.lift;
        eval *handles.@2.close_file.lift;

        // Wait for subprocess.
        let out_is_timeout : Array U8 = Array::empty(1)._unsafe_set_size(1);
        let out_wait_failed : Array U8 = Array::empty(1)._unsafe_set_size(1);
        let out_exit_status : Array U8 = Array::empty(1)._unsafe_set_size(1);
        let out_exit_status_available : Array U8 = Array::empty(1)._unsafe_set_size(1);
        let out_stop_signal : Array U8 = Array::empty(1)._unsafe_set_size(1);
        let out_stop_signal_available : Array U8 = Array::empty(1)._unsafe_set_size(1);
        eval CALL_C[() fixruntime_wait_subprocess(I64, F64, Ptr, Ptr, Ptr, Ptr, Ptr, Ptr), 
            pid, -1.0, // No timeout 
            out_is_timeout._get_ptr,
            out_wait_failed._get_ptr, 
            out_exit_status._get_ptr, out_exit_status_available._get_ptr, 
            out_stop_signal._get_ptr, out_stop_signal_available._get_ptr
        ];
        // Extends lifetime of output variables
        let _ = out_is_timeout;
        let _ = out_wait_failed;
        let _ = out_exit_status;
        let _ = out_exit_status_available;
        let _ = out_stop_signal;
        let _ = out_stop_signal_available;

        let exit_status = if out_wait_failed.@(0) == 1_U8 { 
            ExitStatus::wait_failed()
        } else if out_exit_status_available.@(0) == 1_U8 {
            ExitStatus::exit(out_exit_status.@(0))
        } else if out_stop_signal_available.@(0) == 1_U8 {
            ExitStatus::signaled(out_stop_signal.@(0))
        } else {
            ExitStatus::wait_failed()
        };
        pure $ (worker_res, exit_status)
    ))))
);